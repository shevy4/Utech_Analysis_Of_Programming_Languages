Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> assignment
Rule 5     statement -> expression
Rule 6     statement -> print_statement
Rule 7     assignment -> identifier equals expression
Rule 8     expression -> integer
Rule 9     expression -> float
Rule 10    expression -> string
Rule 11    expression -> identifier
Rule 12    expression -> expression operator expression
Rule 13    expression -> lparen expression rparen
Rule 14    print_statement -> print expression_list
Rule 15    expression_list -> expression
Rule 16    expression_list -> expression_list comma expression

Terminals, with rules where they appear

comma                : 16
equals               : 7
error                : 
float                : 9
identifier           : 7 11
integer              : 8
lparen               : 13
operator             : 12
print                : 14
rparen               : 13
string               : 10

Nonterminals, with rules where they appear

assignment           : 4
expression           : 5 7 12 12 13 15 16
expression_list      : 14 16
print_statement      : 6
program              : 0
statement            : 2 3
statement_list       : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . assignment
    (5) statement -> . expression
    (6) statement -> . print_statement
    (7) assignment -> . identifier equals expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen
    (14) print_statement -> . print expression_list

    identifier      shift and go to state 7
    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    lparen          shift and go to state 11
    print           shift and go to state 12

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print_statement                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . expression
    (6) statement -> . print_statement
    (7) assignment -> . identifier equals expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen
    (14) print_statement -> . print expression_list

    $end            reduce using rule 1 (program -> statement_list .)
    identifier      shift and go to state 7
    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    lparen          shift and go to state 11
    print           shift and go to state 12

    statement                      shift and go to state 13
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print_statement                shift and go to state 6

state 3

    (2) statement_list -> statement .

    identifier      reduce using rule 2 (statement_list -> statement .)
    integer         reduce using rule 2 (statement_list -> statement .)
    float           reduce using rule 2 (statement_list -> statement .)
    string          reduce using rule 2 (statement_list -> statement .)
    lparen          reduce using rule 2 (statement_list -> statement .)
    print           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    identifier      reduce using rule 4 (statement -> assignment .)
    integer         reduce using rule 4 (statement -> assignment .)
    float           reduce using rule 4 (statement -> assignment .)
    string          reduce using rule 4 (statement -> assignment .)
    lparen          reduce using rule 4 (statement -> assignment .)
    print           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> expression .
    (12) expression -> expression . operator expression

    identifier      reduce using rule 5 (statement -> expression .)
    integer         reduce using rule 5 (statement -> expression .)
    float           reduce using rule 5 (statement -> expression .)
    string          reduce using rule 5 (statement -> expression .)
    lparen          reduce using rule 5 (statement -> expression .)
    print           reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    operator        shift and go to state 14


state 6

    (6) statement -> print_statement .

    identifier      reduce using rule 6 (statement -> print_statement .)
    integer         reduce using rule 6 (statement -> print_statement .)
    float           reduce using rule 6 (statement -> print_statement .)
    string          reduce using rule 6 (statement -> print_statement .)
    lparen          reduce using rule 6 (statement -> print_statement .)
    print           reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)


state 7

    (7) assignment -> identifier . equals expression
    (11) expression -> identifier .

    equals          shift and go to state 15
    operator        reduce using rule 11 (expression -> identifier .)
    identifier      reduce using rule 11 (expression -> identifier .)
    integer         reduce using rule 11 (expression -> identifier .)
    float           reduce using rule 11 (expression -> identifier .)
    string          reduce using rule 11 (expression -> identifier .)
    lparen          reduce using rule 11 (expression -> identifier .)
    print           reduce using rule 11 (expression -> identifier .)
    $end            reduce using rule 11 (expression -> identifier .)


state 8

    (8) expression -> integer .

    operator        reduce using rule 8 (expression -> integer .)
    identifier      reduce using rule 8 (expression -> integer .)
    integer         reduce using rule 8 (expression -> integer .)
    float           reduce using rule 8 (expression -> integer .)
    string          reduce using rule 8 (expression -> integer .)
    lparen          reduce using rule 8 (expression -> integer .)
    print           reduce using rule 8 (expression -> integer .)
    $end            reduce using rule 8 (expression -> integer .)
    rparen          reduce using rule 8 (expression -> integer .)
    comma           reduce using rule 8 (expression -> integer .)


state 9

    (9) expression -> float .

    operator        reduce using rule 9 (expression -> float .)
    identifier      reduce using rule 9 (expression -> float .)
    integer         reduce using rule 9 (expression -> float .)
    float           reduce using rule 9 (expression -> float .)
    string          reduce using rule 9 (expression -> float .)
    lparen          reduce using rule 9 (expression -> float .)
    print           reduce using rule 9 (expression -> float .)
    $end            reduce using rule 9 (expression -> float .)
    rparen          reduce using rule 9 (expression -> float .)
    comma           reduce using rule 9 (expression -> float .)


state 10

    (10) expression -> string .

    operator        reduce using rule 10 (expression -> string .)
    identifier      reduce using rule 10 (expression -> string .)
    integer         reduce using rule 10 (expression -> string .)
    float           reduce using rule 10 (expression -> string .)
    string          reduce using rule 10 (expression -> string .)
    lparen          reduce using rule 10 (expression -> string .)
    print           reduce using rule 10 (expression -> string .)
    $end            reduce using rule 10 (expression -> string .)
    rparen          reduce using rule 10 (expression -> string .)
    comma           reduce using rule 10 (expression -> string .)


state 11

    (13) expression -> lparen . expression rparen
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen

    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    identifier      shift and go to state 17
    lparen          shift and go to state 11

    expression                     shift and go to state 16

state 12

    (14) print_statement -> print . expression_list
    (15) expression_list -> . expression
    (16) expression_list -> . expression_list comma expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen

    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    identifier      shift and go to state 17
    lparen          shift and go to state 11

    expression_list                shift and go to state 18
    expression                     shift and go to state 19

state 13

    (3) statement_list -> statement_list statement .

    identifier      reduce using rule 3 (statement_list -> statement_list statement .)
    integer         reduce using rule 3 (statement_list -> statement_list statement .)
    float           reduce using rule 3 (statement_list -> statement_list statement .)
    string          reduce using rule 3 (statement_list -> statement_list statement .)
    lparen          reduce using rule 3 (statement_list -> statement_list statement .)
    print           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 14

    (12) expression -> expression operator . expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen

    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    identifier      shift and go to state 17
    lparen          shift and go to state 11

    expression                     shift and go to state 20

state 15

    (7) assignment -> identifier equals . expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen

    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    identifier      shift and go to state 17
    lparen          shift and go to state 11

    expression                     shift and go to state 21

state 16

    (13) expression -> lparen expression . rparen
    (12) expression -> expression . operator expression

    rparen          shift and go to state 22
    operator        shift and go to state 14


state 17

    (11) expression -> identifier .

    rparen          reduce using rule 11 (expression -> identifier .)
    operator        reduce using rule 11 (expression -> identifier .)
    comma           reduce using rule 11 (expression -> identifier .)
    identifier      reduce using rule 11 (expression -> identifier .)
    integer         reduce using rule 11 (expression -> identifier .)
    float           reduce using rule 11 (expression -> identifier .)
    string          reduce using rule 11 (expression -> identifier .)
    lparen          reduce using rule 11 (expression -> identifier .)
    print           reduce using rule 11 (expression -> identifier .)
    $end            reduce using rule 11 (expression -> identifier .)


state 18

    (14) print_statement -> print expression_list .
    (16) expression_list -> expression_list . comma expression

    identifier      reduce using rule 14 (print_statement -> print expression_list .)
    integer         reduce using rule 14 (print_statement -> print expression_list .)
    float           reduce using rule 14 (print_statement -> print expression_list .)
    string          reduce using rule 14 (print_statement -> print expression_list .)
    lparen          reduce using rule 14 (print_statement -> print expression_list .)
    print           reduce using rule 14 (print_statement -> print expression_list .)
    $end            reduce using rule 14 (print_statement -> print expression_list .)
    comma           shift and go to state 23


state 19

    (15) expression_list -> expression .
    (12) expression -> expression . operator expression

    comma           reduce using rule 15 (expression_list -> expression .)
    identifier      reduce using rule 15 (expression_list -> expression .)
    integer         reduce using rule 15 (expression_list -> expression .)
    float           reduce using rule 15 (expression_list -> expression .)
    string          reduce using rule 15 (expression_list -> expression .)
    lparen          reduce using rule 15 (expression_list -> expression .)
    print           reduce using rule 15 (expression_list -> expression .)
    $end            reduce using rule 15 (expression_list -> expression .)
    operator        shift and go to state 14


state 20

    (12) expression -> expression operator expression .
    (12) expression -> expression . operator expression

  ! shift/reduce conflict for operator resolved as shift
    identifier      reduce using rule 12 (expression -> expression operator expression .)
    integer         reduce using rule 12 (expression -> expression operator expression .)
    float           reduce using rule 12 (expression -> expression operator expression .)
    string          reduce using rule 12 (expression -> expression operator expression .)
    lparen          reduce using rule 12 (expression -> expression operator expression .)
    print           reduce using rule 12 (expression -> expression operator expression .)
    $end            reduce using rule 12 (expression -> expression operator expression .)
    rparen          reduce using rule 12 (expression -> expression operator expression .)
    comma           reduce using rule 12 (expression -> expression operator expression .)
    operator        shift and go to state 14

  ! operator        [ reduce using rule 12 (expression -> expression operator expression .) ]


state 21

    (7) assignment -> identifier equals expression .
    (12) expression -> expression . operator expression

    identifier      reduce using rule 7 (assignment -> identifier equals expression .)
    integer         reduce using rule 7 (assignment -> identifier equals expression .)
    float           reduce using rule 7 (assignment -> identifier equals expression .)
    string          reduce using rule 7 (assignment -> identifier equals expression .)
    lparen          reduce using rule 7 (assignment -> identifier equals expression .)
    print           reduce using rule 7 (assignment -> identifier equals expression .)
    $end            reduce using rule 7 (assignment -> identifier equals expression .)
    operator        shift and go to state 14


state 22

    (13) expression -> lparen expression rparen .

    operator        reduce using rule 13 (expression -> lparen expression rparen .)
    identifier      reduce using rule 13 (expression -> lparen expression rparen .)
    integer         reduce using rule 13 (expression -> lparen expression rparen .)
    float           reduce using rule 13 (expression -> lparen expression rparen .)
    string          reduce using rule 13 (expression -> lparen expression rparen .)
    lparen          reduce using rule 13 (expression -> lparen expression rparen .)
    print           reduce using rule 13 (expression -> lparen expression rparen .)
    $end            reduce using rule 13 (expression -> lparen expression rparen .)
    rparen          reduce using rule 13 (expression -> lparen expression rparen .)
    comma           reduce using rule 13 (expression -> lparen expression rparen .)


state 23

    (16) expression_list -> expression_list comma . expression
    (8) expression -> . integer
    (9) expression -> . float
    (10) expression -> . string
    (11) expression -> . identifier
    (12) expression -> . expression operator expression
    (13) expression -> . lparen expression rparen

    integer         shift and go to state 8
    float           shift and go to state 9
    string          shift and go to state 10
    identifier      shift and go to state 17
    lparen          shift and go to state 11

    expression                     shift and go to state 24

state 24

    (16) expression_list -> expression_list comma expression .
    (12) expression -> expression . operator expression

    comma           reduce using rule 16 (expression_list -> expression_list comma expression .)
    identifier      reduce using rule 16 (expression_list -> expression_list comma expression .)
    integer         reduce using rule 16 (expression_list -> expression_list comma expression .)
    float           reduce using rule 16 (expression_list -> expression_list comma expression .)
    string          reduce using rule 16 (expression_list -> expression_list comma expression .)
    lparen          reduce using rule 16 (expression_list -> expression_list comma expression .)
    print           reduce using rule 16 (expression_list -> expression_list comma expression .)
    $end            reduce using rule 16 (expression_list -> expression_list comma expression .)
    operator        shift and go to state 14

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for operator in state 20 resolved as shift
